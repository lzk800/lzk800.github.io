<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git使用小技巧</title>
    <url>/2020/08/22/Git%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="1-git-push-免密码"><a href="#1-git-push-免密码" class="headerlink" title="1. git push 免密码"></a>1. git push 免密码</h2><h3 id="使用https协议"><a href="#使用https协议" class="headerlink" title="使用https协议"></a>使用https协议</h3><p>1.使用文件创建用户名和密码<br>文件创建在用户主目录下：</p>
<pre><code>vim ~/.git-credentials

https://USERNAME:PASSWORD@github.com</code></pre>
<p>2.添加git config内容</p>
<pre><code>git config --global credential.helper store</code></pre>
<p>执行此命令后，用户主目录下的.gitconfig文件会多了一项：</p>
<pre><code>[credential]
helper = store</code></pre>
<p>重新git push就不需要用户名密码了。</p>
<h3 id="使用ssh协议"><a href="#使用ssh协议" class="headerlink" title="使用ssh协议"></a>使用ssh协议</h3><p>首先生成密钥对：</p>
<pre><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre>
<p>接下来按照提示操作，默认可以一路往下。</p>
<p>然后将生成的位于<code>~/.ssh/</code>的<code>id_rsa.pub</code>的内容复制到你github setting里的ssh key中。</p>
<p>复制之后，如果你还没有克隆你的仓库，那你直接使用ssh协议用法：<code>git@github.com:yourusername/yourrepositoryname</code>克隆就行了。</p>
<p>如果已经使用https协议克隆了，那么按照如下方法更改协议：</p>
<pre><code>git remote set-url origin
git@github.com:yourusername/yourrepositoryname.git</code></pre>
<p>Done!</p>
<hr>
<h2 id="2-git-add-使用tab键自动补全的中文文件名乱码"><a href="#2-git-add-使用tab键自动补全的中文文件名乱码" class="headerlink" title="2. git add 使用tab键自动补全的中文文件名乱码"></a>2. git add 使用tab键自动补全的中文文件名乱码</h2><p>文件名乱码如下所示：</p>
<p><img src="https://pic.zkliang.com/decode_error.png" alt="乱码"></p>
<p><strong>解决方法为：</strong></p>
<pre><code>git config --global core.quotepath false</code></pre>
<p>效果如下：</p>
<p><img src="https://pic.zkliang.com/decode_fixed.png" alt="效果"></p>
<p>可以看出中文已经正确显示了。</p>
<hr>
<h2 id="3-git-迁移仓库到另外一个仓库"><a href="#3-git-迁移仓库到另外一个仓库" class="headerlink" title="3. git 迁移仓库到另外一个仓库"></a>3. git 迁移仓库到另外一个仓库</h2><pre><code># 仅保留历史提交信息
git clone --bare yourrepository</code></pre>
<p>然后在你的其他服务，比如gogs新建一个仓库，然后进入你上步克隆出的仓库中，执行：</p>
<pre><code>git push --mirror yourNewRepository</code></pre>
<p>然后你就可以删除原来的仓库，然后<code>git clone</code>新仓库就行了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim键位图</title>
    <url>/2020/08/22/Vim%E9%94%AE%E4%BD%8D%E5%9B%BE/</url>
    <content><![CDATA[<p><a href="https://pic.zkliang.com/vim_keyboard.jpg"><img src="https://pic.zkliang.com/vim_keyboard.jpg" alt="键位图"></a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>月考(一)</title>
    <url>/2020/05/18/%E6%9C%88%E8%80%83(%E4%B8%80)/</url>
    <content><![CDATA[<h2 id="一、10-个选择题（每个题2-分，共20-分）"><a href="#一、10-个选择题（每个题2-分，共20-分）" class="headerlink" title="一、10 个选择题（每个题2 分，共20 分）"></a>一、10 个选择题（每个题2 分，共20 分）</h2><h3 id="1、查看当前系统时间的命令是什么？"><a href="#1、查看当前系统时间的命令是什么？" class="headerlink" title="1、查看当前系统时间的命令是什么？"></a>1、查看当前系统时间的命令是什么？</h3><p>A.date<br>B.time<br>C.now<br>D.pwd</p>
<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h3 id="2、回到用户家目录的命令是什么？"><a href="#2、回到用户家目录的命令是什么？" class="headerlink" title="2、回到用户家目录的命令是什么？"></a>2、回到用户家目录的命令是什么？</h3><p>A.cd -<br>B.cd ~<br>C.cd /root<br>D.cd /home</p>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h3 id="3、查看Linux-系统中命令是内建命令还是外部命令的命令是什么？"><a href="#3、查看Linux-系统中命令是内建命令还是外部命令的命令是什么？" class="headerlink" title="3、查看Linux 系统中命令是内建命令还是外部命令的命令是什么？"></a>3、查看Linux 系统中命令是内建命令还是外部命令的命令是什么？</h3><p>A.file<br>B.type<br>C.who<br>D.whereis</p>
<h3 id="B-1"><a href="#B-1" class="headerlink" title="B"></a>B</h3><h3 id="4、linux-终端中如何快速跳至行尾？"><a href="#4、linux-终端中如何快速跳至行尾？" class="headerlink" title="4、linux 终端中如何快速跳至行尾？"></a>4、linux 终端中如何快速跳至行尾？</h3><p>A.Ctrl+a<br>B.Ctrl+e<br>C.Ctrl+w<br>D.Ctrl+z</p>
<h3 id="B-2"><a href="#B-2" class="headerlink" title="B"></a>B</h3><h3 id="5、命令历史中，使用上一条命令的快捷键是？"><a href="#5、命令历史中，使用上一条命令的快捷键是？" class="headerlink" title="5、命令历史中，使用上一条命令的快捷键是？"></a>5、命令历史中，使用上一条命令的快捷键是？</h3><p>A.!999<br>B.!!<br>C.history<br>D.!1000</p>
<h3 id="B-3"><a href="#B-3" class="headerlink" title="B"></a>B</h3><h3 id="6、linux-修改文件或者目录权限的命令是？"><a href="#6、linux-修改文件或者目录权限的命令是？" class="headerlink" title="6、linux 修改文件或者目录权限的命令是？"></a>6、linux 修改文件或者目录权限的命令是？</h3><p>A.groupadd<br>B.useradd<br>C.chmod<br>D.chown</p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h3 id="7、wc-命令统计文件单词数的选项是"><a href="#7、wc-命令统计文件单词数的选项是" class="headerlink" title="7、wc 命令统计文件单词数的选项是?"></a>7、wc 命令统计文件单词数的选项是?</h3><p>A.-L<br>B.-w<br>C.-l<br>D.-c</p>
<h3 id="B-4"><a href="#B-4" class="headerlink" title="B"></a>B</h3><h3 id="8-此文件的权限应该是-rw-r–r–"><a href="#8-此文件的权限应该是-rw-r–r–" class="headerlink" title="8.此文件的权限应该是-rw-r–r–"></a>8.此文件的权限应该是-rw-r–r–</h3><p>A.655<br>B.644<br>C.622<br>D.642</p>
<h3 id="B-5"><a href="#B-5" class="headerlink" title="B"></a>B</h3><h3 id="9、下面不属于linux-内核的作用是？"><a href="#9、下面不属于linux-内核的作用是？" class="headerlink" title="9、下面不属于linux 内核的作用是？"></a>9、下面不属于linux 内核的作用是？</h3><p>A.管理进程<br>B.管理内存<br>C.网络管理<br>D.管理用户</p>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h3 id="10、存放用户账号的文件是？"><a href="#10、存放用户账号的文件是？" class="headerlink" title="10、存放用户账号的文件是？"></a>10、存放用户账号的文件是？</h3><p>A.shadow<br>B.group<br>C.passwd<br>D.shadow</p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h3><h2 id="二、五个简单题（每个题7-分，共35-分）"><a href="#二、五个简单题（每个题7-分，共35-分）" class="headerlink" title="二、五个简单题（每个题7 分，共35 分）"></a>二、五个简单题（每个题7 分，共35 分）</h2><h3 id="1-Linux-目录结构："><a href="#1-Linux-目录结构：" class="headerlink" title="1. Linux 目录结构："></a>1. Linux 目录结构：</h3><pre><code>/bin：所有用户可用的基本命令程序文件；
/sbin：供系统管理使用的工具程序；
/boot：引导加载器必须用到的各静态文件：kernel, initramfs(initrd), grub等；
/dev：存储特殊文件或设备文件；
    设备有两种类型：字符设备(线性设备)、块设备(随机设备)；
/etc：系统程序的配置文件，只能为静态；
/home：普通用户的家目录的集中存放位置；
/root：管理员的家目录；可选；
/lib：为系统启动或根文件系统上的应用程序(/bin, /sbin等)提供共享库，以及为内核提供内核模块
    libc.so.*：动态链接的C库；
    ld*：运行时链接器/加载器
    modules：用于存储内核模块的目录；
/lib64：64位系统特有的存放64位共享库的路径；
/media：便携式设备的挂载点，cdrom，floppy等；
/mnt：其他文件系统的临时挂载点；
/opt：附加应用程序的安装位置；可选路径；
/srv：当前主机为服务提供的数据；
/tmp：为那些会产生临时文件的程序提供的用于存储临时文件的目录；可供所有用户执行写入操作；有特殊权限；
/usr：usr Hierarchy，全局共享的只读数据层级结构；
/var：var Hierarchy，存储经常发生变化的数据层级结构；
/proc：虚拟文件系统，用于为内核及进程存储其相关信息；它们多为内核参数，例如net.ipv4.ip_forward，虚拟为/net/ipv4/forward，存储于/proc/sys/
/sys：sysfs虚拟文件系统提供了一种比proc更为理想的访问内核数据的途径；其主要作用在于为管理Linux设备提供一种统一模型的接口；</code></pre>
<h3 id="2、请写出Linux-的哲学思想"><a href="#2、请写出Linux-的哲学思想" class="headerlink" title="2、请写出Linux 的哲学思想"></a>2、请写出Linux 的哲学思想</h3><pre><code>1. 一切皆文件（硬件设备亦如此）；
2. 由众多目的单一的小程序组成，一个程序只做一件事，并且要好；
3. 组合小程序完成复杂任务；
4. 尽可能避免跟用户交互；
5. 使用文本文件保存配置信息；
6. 提供机制，而非策略。</code></pre>
<h3 id="3、操作系统的功用有哪些？"><a href="#3、操作系统的功用有哪些？" class="headerlink" title="3、操作系统的功用有哪些？"></a>3、操作系统的功用有哪些？</h3><pre><code>目标：方便性，有效性，可扩充性，开放性。
作用：
    1.OS作为用户与计算机硬件系统之间的接口。
    2.OS作为计算机系统资源的管理者。
    3.OS实现了对计算机资源的抽象。
操作系统的主要功能
    1.处理机管理功能。
    2.存储器管理功能。
    3.设备管理功能。
    4.文件管理功能。
    5.操作系统与用户之间的接口。</code></pre>
<h3 id="4、请写出至少三种常见的linux-发行版"><a href="#4、请写出至少三种常见的linux-发行版" class="headerlink" title="4、请写出至少三种常见的linux 发行版"></a>4、请写出至少三种常见的linux 发行版</h3><pre><code>Debian是三大发行版中唯一以社区形式运作，不以商业公司形式运作。是一个致力于创建自由操作系统的合作组织。而且debian开发者所创建的操作系统中绝大部分基础工具来自于GNU工程。
Fedore是一款基于linux的操作系统，也是一组维持计算机正常运行的软件集合。由红帽公司赞助。
Suse是基于Slackware二次开发的一款Linux,主要用于商业桌面、服务器。</code></pre>
<h3 id="5、linux-日常账号管理需要注意哪些方面？"><a href="#5、linux-日常账号管理需要注意哪些方面？" class="headerlink" title="5、linux 日常账号管理需要注意哪些方面？"></a>5、linux 日常账号管理需要注意哪些方面？</h3><pre><code>1. root账号不要开启远程登录，或者只允许root用户使用key的方式登录
2. 日常最好使用普通用户登录
3. 密码不要是弱密码，最好8位以上带字母大小写和数字，最好还带符号</code></pre>
<h2 id="三、三个实战题（每题15-分，共45-分）"><a href="#三、三个实战题（每题15-分，共45-分）" class="headerlink" title="三、三个实战题（每题15 分，共45 分）"></a>三、三个实战题（每题15 分，共45 分）</h2><h3 id="1、写一个脚本，生产10-个随机数，并从小到大排序？"><a href="#1、写一个脚本，生产10-个随机数，并从小到大排序？" class="headerlink" title="1、写一个脚本，生产10 个随机数，并从小到大排序？"></a>1、写一个脚本，生产10 个随机数，并从小到大排序？</h3><pre><code>#!/bin/bash
declare -a NUMS

for i in `seq 0 9`;do
    NUMS[$i]=$[RANDOM%1000]
done

echo 原始顺序：$&#123;NUMS[*]&#125;
for i in `seq 1 9`;do
    for j in `seq $i 9`;do
        MIN=$&#123;NUMS[$i-1]&#125;
        if [[ $MIN -gt $&#123;NUMS[$j]&#125; ]];then
            NUMS[$i-1]=$&#123;NUMS[$j]&#125;
            NUMS[$j]=$MIN
        fi
    done
done

echo 从小到大排序：$&#123;NUMS[*]&#125;</code></pre>
<h3 id="2、使用脚本创建system1-50-个用户，并指定家目录为-data-system-1-50"><a href="#2、使用脚本创建system1-50-个用户，并指定家目录为-data-system-1-50" class="headerlink" title="2、使用脚本创建system1-50 个用户，并指定家目录为/data/system[1-50]"></a>2、使用脚本创建system1-50 个用户，并指定家目录为/data/system[1-50]</h3><pre><code>#!/bin/bash
for i in `seq 50`;do
    if id user$i &amp;&gt; /dev/null;then
        echo 用户user$i已存在。
    else
        useradd -d /data/user$i user$i 
        echo 用户user$i创建成功。
    fi
done</code></pre>
<h3 id="3、简述su-命令的作用，并说明su-root-和su-root-的区别"><a href="#3、简述su-命令的作用，并说明su-root-和su-root-的区别" class="headerlink" title="3、简述su 命令的作用，并说明su root 和su - root 的区别"></a>3、简述su 命令的作用，并说明su root 和su - root 的区别</h3><pre><code>su - root 是切换到root账号使用，使用的是root用户的环境变量；
su root 则是取得root的特权，以root的身份执行程序，但保留原来用户环境。</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
  <entry>
    <title>第一周</title>
    <url>/2020/04/13/%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    <content><![CDATA[<h2 id="一、按系列罗列Linux的发行版，并描述不同发行版之间的联系与区别。"><a href="#一、按系列罗列Linux的发行版，并描述不同发行版之间的联系与区别。" class="headerlink" title="一、按系列罗列Linux的发行版，并描述不同发行版之间的联系与区别。"></a>一、按系列罗列Linux的发行版，并描述不同发行版之间的联系与区别。</h2><pre><code>Debian是三大发行版中唯一以社区形式运作，不以商业公司形式运作。是一个致力于创建自由操作系统的合作组织。而且debian开发者所创建的操作系统中绝大部分基础工具来自于GNU工程。
Fedore是一款基于linux的操作系统，也是一组维持计算机正常运行的软件集合。由红帽公司赞助。
Suse是基于Slackware二次开发的一款Linux,主要用于商业桌面、服务器。

不同发行版之间的联系：
    所有发行版都是使用Linux内核；都需要遵循GNU的GPL（General Public License）协定

不同发行版之间的区别：
    发行版的本质区别，在于继承不同版本的内核，库、程序的组成。
    不同发行版几乎采用了不同包管理器（SLES、Fedora、openSUSE、centos、RHEL使用rmp包管理系统，包文件以RPM为扩展名；
    Ubuntu系列，Debian系列使用基于DPKG包管理系统，包文件以deb为扩展名。)</code></pre>
<h2 id="二、安装Centos7-6操作系统，创建一个自己名字的用户名，并可以正常登录，将主要步骤截图。"><a href="#二、安装Centos7-6操作系统，创建一个自己名字的用户名，并可以正常登录，将主要步骤截图。" class="headerlink" title="二、安装Centos7.6操作系统，创建一个自己名字的用户名，并可以正常登录，将主要步骤截图。"></a>二、安装Centos7.6操作系统，创建一个自己名字的用户名，并可以正常登录，将主要步骤截图。</h2><pre><code>[root@centos7 ~]# useradd zkliang
[root@centos7 ~]# echo &quot;zkliang&quot; | passwd --stdin zkliang
Changing password for user zkliang.
passwd: all authentication tokens updated successfully.
[root@centos7 ~]# su - zkliang
[zkliang@centos7 ~]$ </code></pre>
<h2 id="三、配置环境变量，实现执行history的时候可以看到执行命令的时间。"><a href="#三、配置环境变量，实现执行history的时候可以看到执行命令的时间。" class="headerlink" title="三、配置环境变量，实现执行history的时候可以看到执行命令的时间。"></a>三、配置环境变量，实现执行history的时候可以看到执行命令的时间。</h2><h3 id="1-在-bash-profile文件中新增一行，写入：HISTTIMEFORMAT-””-F-T-“，保存退出"><a href="#1-在-bash-profile文件中新增一行，写入：HISTTIMEFORMAT-””-F-T-“，保存退出" class="headerlink" title="1. 在~/.bash_profile文件中新增一行，写入：HISTTIMEFORMAT=””%F %T “，保存退出"></a>1. 在~/.bash_profile文件中新增一行，写入：HISTTIMEFORMAT=””%F %T “，保存退出</h3><pre><code>[root@centos6 ~]$vi ./bash_profile 
# .bash_profile

# Get the aliases and functions
    if [ -f ~/.bashrc ]; then
        . ~/.bashrc
    fi

# User specific environment and startup programs

PATH=$PATH:$HOME/bin
**HISTTIMEFORMAT=&quot;”%F %T &quot;**
export PATH</code></pre>
<h3 id="2-使更新后的文件生效，有两种方式source和"><a href="#2-使更新后的文件生效，有两种方式source和" class="headerlink" title="2. 使更新后的文件生效，有两种方式source和."></a>2. 使更新后的文件生效，有两种方式source和.</h3><pre><code>[root@centos6 ~]$source .bash_profile</code></pre>
<h3 id="3-验证效果"><a href="#3-验证效果" class="headerlink" title="3. 验证效果"></a>3. 验证效果</h3><pre><code>[root@centos6 ~]$history
    1  ”2020-04-15 17:44:06 id -u user
    2  ”2020-04-15 17:44:06 id -u
    3  ”2020-04-15 17:44:06 cat /etc/shells
    4  ”2020-04-15 17:44:06 nano /etc/profile.d/env.sh
    5  ”2020-04-15 17:44:06 cat /etc/profile.d/env.sh
    6  ”2020-04-15 17:44:06 exit</code></pre>
<h2 id="四、总结Linux哲学思想。"><a href="#四、总结Linux哲学思想。" class="headerlink" title="四、总结Linux哲学思想。"></a>四、总结Linux哲学思想。</h2><ol>
<li>一切皆文件（硬件设备亦如此）；</li>
<li>由众多目的单一的小程序组成，一个程序只做一件事，并且要好；</li>
<li>组合小程序完成复杂任务；</li>
<li>尽可能避免跟用户交互；</li>
<li>使用文本文件保存配置信息；</li>
<li>提供机制，而非策略。</li>
</ol>
<h2 id="五、总结Linux常用命令使用格式，并用实例说明。例如echo、screen、date、ifconfig、export等命令"><a href="#五、总结Linux常用命令使用格式，并用实例说明。例如echo、screen、date、ifconfig、export等命令" class="headerlink" title="五、总结Linux常用命令使用格式，并用实例说明。例如echo、screen、date、ifconfig、export等命令"></a>五、总结Linux常用命令使用格式，并用实例说明。例如echo、screen、date、ifconfig、export等命令</h2><h3 id="1、echo"><a href="#1、echo" class="headerlink" title="1、echo"></a>1、echo</h3><pre><code>echo：输出信息 
echo &quot;abc&quot; 
echo &quot;字符串&quot; | passwd --stdin USERNAME：利用管道修改用户密码</code></pre>
<h3 id="2、screen"><a href="#2、screen" class="headerlink" title="2、screen"></a>2、screen</h3><pre><code>screen：模拟多个窗口，窗口关闭后还可以调出来，常用于需要执行很长时间的时候，如内核编译
screen -ls：显示已经建立的屏幕
screen：打开一个新的屏幕
exit：退出当前屏幕
screen -r ID：返回某个屏幕</code></pre>
<h3 id="3、date"><a href="#3、date" class="headerlink" title="3、date"></a>3、date</h3><pre><code>date：显示系统时间
clock：显示硬件时间
hwclock -W：把系统时间同步到硬件时间 
hwclock -s：把硬件时间同步到系统时间 
cal：显示日历</code></pre>
<h3 id="4、ifconfig"><a href="#4、ifconfig" class="headerlink" title="4、ifconfig"></a>4、ifconfig</h3><pre><code>ifconfig：查看和配置系统的网络信息
    [ethX]：显示某个网卡信息
    -a：显示所有的网卡信息
    ifconfig ethx IP/MASK :配置网卡地址（子网掩码必须指定）
    ifconfig ethx [up|down]：开启或者禁用网卡配置IP地址是立即生效，但重启网络服务或重启主机，都失效</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
  <entry>
    <title>第七周</title>
    <url>/2020/05/25/%E7%AC%AC%E4%B8%83%E5%91%A8/</url>
    <content><![CDATA[<h2 id="1、自建yum仓库，分别为网络源和本地源"><a href="#1、自建yum仓库，分别为网络源和本地源" class="headerlink" title="1、自建yum仓库，分别为网络源和本地源"></a>1、自建yum仓库，分别为网络源和本地源</h2><ul>
<li><h3 id="网络源"><a href="#网络源" class="headerlink" title="网络源"></a>网络源</h3><h4 id="1-在-etc-yum-repos-d-路径下建立文件aliyun-repo写入以下内容："><a href="#1-在-etc-yum-repos-d-路径下建立文件aliyun-repo写入以下内容：" class="headerlink" title="1. 在/etc/yum.repos.d/路径下建立文件aliyun.repo写入以下内容："></a>1. 在/etc/yum.repos.d/路径下建立文件aliyun.repo写入以下内容：</h4><pre><code>      [base]
      name=CentOS-$releasever - Base - mirrors.aliyun.com
      failovermethod=priority
      baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/
      http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/
      http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/
      gpgcheck=1
      gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</code></pre>
</li>
<li><h3 id="本地源"><a href="#本地源" class="headerlink" title="本地源"></a>本地源</h3><h4 id="1-备份默认yum源配置文件"><a href="#1-备份默认yum源配置文件" class="headerlink" title="1. 备份默认yum源配置文件"></a>1. 备份默认yum源配置文件</h4><pre><code>      [root@centos7 ~]# cd /etc/yum.repos.d
      [root@centos7 yum.repos.d]# mkdir backup
      [root@centos7 yum.repos.d]# mv ./*.repo backup/</code></pre>
<h4 id="2-挂载光盘"><a href="#2-挂载光盘" class="headerlink" title="2. 挂载光盘"></a>2. 挂载光盘</h4><pre><code>      [root@centos7 yum.repos.d]# mkdir /mnt/cdrom
      [root@centos7 yum.repos.d]# mount /dev/sr0 /mnt/cdrom</code></pre>
<h4 id="3-配置光盘作为本地yum源"><a href="#3-配置光盘作为本地yum源" class="headerlink" title="3. 配置光盘作为本地yum源"></a>3. 配置光盘作为本地yum源</h4><pre><code>  在/etc/yum.repos.d/路径下建立文件base.repo写入以下内容：  

      [base-local]  
      name=cdrom base  
      baseurl=file:///mnt/cdrom/  
      gpgcheck=0  
      gpgkey=file:///mnt/cdrom/RPM-GPG-KEY-CentOS-7</code></pre>
</li>
</ul>
<h2 id="2、编译安装http2-4，实现可以正常访问，并将编译步骤和结果提交。"><a href="#2、编译安装http2-4，实现可以正常访问，并将编译步骤和结果提交。" class="headerlink" title="2、编译安装http2.4，实现可以正常访问，并将编译步骤和结果提交。"></a>2、编译安装http2.4，实现可以正常访问，并将编译步骤和结果提交。</h2><ol>
<li><p>安装”Development Tools”包组、apr-devel包、apr-util-devel包和pcre-devel包</p>
<pre><code> ~]# yum -y group install &quot;Development Tools&quot;
 ~]# yum -y install apr-devel apr-util-devel pcre-devel</code></pre>
</li>
<li><p>用wget从<a href="https://httpd.apache.org/download.cgi">https://httpd.apache.org/download.cgi</a>下载httpd源码包</p>
<pre><code> ~]# wget https://downloads.apache.org//httpd/httpd-2.4.46.tar.bz2</code></pre>
</li>
<li><p>解压缩源码包，切换至httpd源码目录并编译安装</p>
<pre><code> ~]# tar jxf httpd-2.4.46.tar.bz2
 ~]# cd httpd-2.4.46
 httpd-2.4.46]# ./configure --with-apr=/usr/bin/apr-1-config --with-apr-util=/usr/bin/apu-1-config --with-pcre=/usr/bin/pcre-config
 httpd-2.4.46]# make</code></pre>
<p> <img src="https://pic.zkliang.com/httpd_maked.png" alt="编译完成"></p>
<pre><code> httpd-2.4.46]# make install</code></pre>
<p> <img src="https://pic.zkliang.com/httpd_installed.png" alt="安装完成"></p>
</li>
<li><p>测试启动httpd</p>
<pre><code> httpd-2.4.46]# /usr/local/apache2/bin/apachectl start</code></pre>
<p> <img src="https://pic.zkliang.com/httpd_started.png" alt="启动完成"></p>
</li>
<li><p>完成，已可连接至服务器</p>
</li>
</ol>
<h2 id="3、创建一个2G的文件系统，块大小为2048byte，预留1-可用空间-文件系统-ext4，卷标为TEST，要求此分区开机后自动挂载至-test目录，且默认有acl挂载选项"><a href="#3、创建一个2G的文件系统，块大小为2048byte，预留1-可用空间-文件系统-ext4，卷标为TEST，要求此分区开机后自动挂载至-test目录，且默认有acl挂载选项" class="headerlink" title="3、创建一个2G的文件系统，块大小为2048byte，预留1%可用空间,文件系统 ext4，卷标为TEST，要求此分区开机后自动挂载至/test目录，且默认有acl挂载选项"></a>3、创建一个2G的文件系统，块大小为2048byte，预留1%可用空间,文件系统 ext4，卷标为TEST，要求此分区开机后自动挂载至/test目录，且默认有acl挂载选项</h2><pre><code>~]# fdisk /dev/sdb
# 创建一个分区；
~]# lsblk
# 查看创建的分区块设备；
~]# mke2fs -b 2048 -L TEST -t ext4 /dev/sdb1；
~]# dumpe2fs /dev/sdb1 | more
# 查看文件系统信息；
~]# blkid
# 查看文件系统；
~]# vim /etc/fstab
# 添加配置文件实现自动挂载；
~]# df -h
# 查看挂载的文件系统；</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
  <entry>
    <title>第三周</title>
    <url>/2020/04/27/%E7%AC%AC%E4%B8%89%E5%91%A8/</url>
    <content><![CDATA[<h2 id="1、显示-etc目录下，以非字母开头，后面跟了一个字母以及其它任意长度任意字符的文件或目录"><a href="#1、显示-etc目录下，以非字母开头，后面跟了一个字母以及其它任意长度任意字符的文件或目录" class="headerlink" title="1、显示/etc目录下，以非字母开头，后面跟了一个字母以及其它任意长度任意字符的文件或目录"></a>1、显示/etc目录下，以非字母开头，后面跟了一个字母以及其它任意长度任意字符的文件或目录</h2><pre><code>ls -d /etc/[^a-z][a-z]*</code></pre>
<h2 id="2、复制-etc目录下所有以p开头，以非数字结尾的文件或目录到-tmp-mytest1目录中。"><a href="#2、复制-etc目录下所有以p开头，以非数字结尾的文件或目录到-tmp-mytest1目录中。" class="headerlink" title="2、复制/etc目录下所有以p开头，以非数字结尾的文件或目录到/tmp/mytest1目录中。"></a>2、复制/etc目录下所有以p开头，以非数字结尾的文件或目录到/tmp/mytest1目录中。</h2><pre><code>cp -r /etc/p*[^0-9] /tmp/mytest1/</code></pre>
<h2 id="3、将-etc-issue文件中的内容转换为大写后保存至-tmp-issue-out文件中"><a href="#3、将-etc-issue文件中的内容转换为大写后保存至-tmp-issue-out文件中" class="headerlink" title="3、将/etc/issue文件中的内容转换为大写后保存至/tmp/issue.out文件中"></a>3、将/etc/issue文件中的内容转换为大写后保存至/tmp/issue.out文件中</h2><pre><code>cat /etc/issue | tr [[:lower:]] [[:upper:]] &gt; /tmp/issue.out</code></pre>
<h2 id="4、请总结描述用户和组管理类命令的使用方法并完成以下练习："><a href="#4、请总结描述用户和组管理类命令的使用方法并完成以下练习：" class="headerlink" title="4、请总结描述用户和组管理类命令的使用方法并完成以下练习："></a>4、请总结描述用户和组管理类命令的使用方法并完成以下练习：</h2><h3 id="1-、创建组distro，其GID为2019；"><a href="#1-、创建组distro，其GID为2019；" class="headerlink" title="(1)、创建组distro，其GID为2019；"></a>(1)、创建组distro，其GID为2019；</h3><pre><code>groupadd -g 2019 distro</code></pre>
<h3 id="2-、创建用户mandriva，其ID号为1005；基本组为distro；"><a href="#2-、创建用户mandriva，其ID号为1005；基本组为distro；" class="headerlink" title="(2)、创建用户mandriva，其ID号为1005；基本组为distro；"></a>(2)、创建用户mandriva，其ID号为1005；基本组为distro；</h3><pre><code>useradd -u 1005 -g 2019 mandriva</code></pre>
<h3 id="3-、创建用户mageia，其ID号为1100，家目录为-home-linux"><a href="#3-、创建用户mageia，其ID号为1100，家目录为-home-linux" class="headerlink" title="(3)、创建用户mageia，其ID号为1100，家目录为/home/linux;"></a>(3)、创建用户mageia，其ID号为1100，家目录为/home/linux;</h3><pre><code>useradd -u 1100 -d /home/linux mageia</code></pre>
<h3 id="4-、给用户mageia添加密码，密码为mageedu，并设置用户密码7天后过期"><a href="#4-、给用户mageia添加密码，密码为mageedu，并设置用户密码7天后过期" class="headerlink" title="(4)、给用户mageia添加密码，密码为mageedu，并设置用户密码7天后过期"></a>(4)、给用户mageia添加密码，密码为mageedu，并设置用户密码7天后过期</h3><pre><code>echo -e &#39;mageedu&#39; | passwd --stdin mageia</code></pre>
<h3 id="5-、删除mandriva，但保留其家目录；"><a href="#5-、删除mandriva，但保留其家目录；" class="headerlink" title="(5)、删除mandriva，但保留其家目录；"></a>(5)、删除mandriva，但保留其家目录；</h3><pre><code>userdel mandriva</code></pre>
<h3 id="6-、创建用户slackware，其ID号为2002，基本组为distro，附加组peguin；"><a href="#6-、创建用户slackware，其ID号为2002，基本组为distro，附加组peguin；" class="headerlink" title="(6)、创建用户slackware，其ID号为2002，基本组为distro，附加组peguin；"></a>(6)、创建用户slackware，其ID号为2002，基本组为distro，附加组peguin；</h3><pre><code>useradd -u 2002 -g 2019 -G peguin slackware</code></pre>
<h3 id="7-、修改slackware的默认shell为-bin-tcsh；"><a href="#7-、修改slackware的默认shell为-bin-tcsh；" class="headerlink" title="(7)、修改slackware的默认shell为/bin/tcsh；"></a>(7)、修改slackware的默认shell为/bin/tcsh；</h3><pre><code>usermod -s /bin/tcsh slackware</code></pre>
<h3 id="8-、为用户slackware新增附加组admins；"><a href="#8-、为用户slackware新增附加组admins；" class="headerlink" title="(8)、为用户slackware新增附加组admins；"></a>(8)、为用户slackware新增附加组admins；</h3><pre><code>usermod -G -a admins slackware</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
  <entry>
    <title>第二周</title>
    <url>/2020/04/20/%E7%AC%AC%E4%BA%8C%E5%91%A8/</url>
    <content><![CDATA[<h2 id="1、描述Linux发行版的系统目录名称命名规则以及用途。"><a href="#1、描述Linux发行版的系统目录名称命名规则以及用途。" class="headerlink" title="1、描述Linux发行版的系统目录名称命名规则以及用途。"></a>1、描述Linux发行版的系统目录名称命名规则以及用途。</h2><pre><code>/bin：所有用户可用的基本命令程序文件；
/sbin：供系统管理使用的工具程序；
/boot：引导加载器必须用到的各静态文件：kernel, initramfs(initrd), grub等；
/dev：存储特殊文件或设备文件；
    设备有两种类型：字符设备(线性设备)、块设备(随机设备)；
/etc：系统程序的配置文件，只能为静态；
/home：普通用户的家目录的集中存放位置；
/root：管理员的家目录；可选；
/lib：为系统启动或根文件系统上的应用程序(/bin, /sbin等)提供共享库，以及为内核提供内核模块
    libc.so.*：动态链接的C库；
    ld*：运行时链接器/加载器
    modules：用于存储内核模块的目录；
/lib64：64位系统特有的存放64位共享库的路径；
/media：便携式设备的挂载点，cdrom，floppy等；
/mnt：其他文件系统的临时挂载点；
/opt：附加应用程序的安装位置；可选路径；
/srv：当前主机为服务提供的数据；
/tmp：为那些会产生临时文件的程序提供的用于存储临时文件的目录；可供所有用户执行写入操作；有特殊权限；
/usr：usr Hierarchy，全局共享的只读数据层级结构；
/var：var Hierarchy，存储经常发生变化的数据层级结构；
/proc：虚拟文件系统，用于为内核及进程存储其相关信息；它们多为内核参数，例如net.ipv4.ip_forward，虚拟为/net/ipv4/forward，存储于/proc/sys/
/sys：sysfs虚拟文件系统提供了一种比proc更为理想的访问内核数据的途径；其主要作用在于为管理Linux设备提供一种统一模型的接口；</code></pre>
<h2 id="2、描述文件的元数据信息有哪些，分别表示什么含义，如何查看？如何修改文件的时间戳信息？"><a href="#2、描述文件的元数据信息有哪些，分别表示什么含义，如何查看？如何修改文件的时间戳信息？" class="headerlink" title="2、描述文件的元数据信息有哪些，分别表示什么含义，如何查看？如何修改文件的时间戳信息？"></a>2、描述文件的元数据信息有哪些，分别表示什么含义，如何查看？如何修改文件的时间戳信息？</h2><ul>
<li><p>时间戳：access time、modify time、change time</p>
</li>
<li><p>查看：</p>
<pre><code>  stat命令：
  显示文件或文件系统的状态
  stat FILE…</code></pre>
</li>
<li><p>修改：</p>
<pre><code>  touch [OPTION]…   FILE…
      -c：指定的文件路径不存在时不予创建；
      -a：仅修改access time；
      -m：仅修改modify time；
      -t STAMP [[CC]YY]MMDDhhmm[.ss]</code></pre>
</li>
</ul>
<h2 id="3、总结软链接和硬链接区别，并用实例操作说明。"><a href="#3、总结软链接和硬链接区别，并用实例操作说明。" class="headerlink" title="3、总结软链接和硬链接区别，并用实例操作说明。"></a>3、总结软链接和硬链接区别，并用实例操作说明。</h2><ul>
<li><p>硬链接:</p>
<ul>
<li>创建硬链接会增加额外的记录项以引用文件</li>
<li>对应于同一文件系统上一个物理文件</li>
<li>每个目录引用相同的inode号</li>
<li>创建时链接数递增</li>
<li>删除文件时：</li>
<li>rm命令递减计数的链接</li>
<li>文件要存在，至少有一个链接数</li>
<li>当链接数为零时，该文件被删除</li>
<li>不能跨越驱动器或分区</li>
<li>语法:<br>  <code>ln filename [linkname ]</code></li>
</ul>
</li>
<li><p>符号（或软）链接:</p>
<ul>
<li>一个符号链接指向另一个文件</li>
<li>ls - l的 显示链接的名称和引用的文件</li>
<li>一个符号链接的内容是它引用文件的名称</li>
<li>可以对目录进行</li>
<li>可以跨分区</li>
<li>指向的是另一个文件的路径；其大小为指向的路径字符串的长度；不增加或减少目标文件inode的引用计数</li>
<li>语法：<br>  <code>ln -s filename [linkname]</code></li>
</ul>
</li>
<li><p>硬链接示例：</p>
<pre><code>  [root@centos7 ~]# touch aa
  [root@centos7 ~]# ln aa aa.link
  [root@centos7 ~]# ll -i aa aa.link
  50808392 -rw-r--r--. 2 root root 0 Mar  1 08:15 aa        //可以看到源文件和硬链接文件inode号、权限、时间一致
  50808392 -rw-r--r--. 2 root root 0 Mar  1 08:15 aa.link     //文件类型为普通文件
  [root@centos7 ~]# ll
  total 0
  -rw-r--r--. 2 root root 0 Mar  1 08:15 aa
  -rw-r--r--. 2 root root 0 Mar  1 08:15 aa.link
  [root@centos7 ~]# rm -rf aa                                      //把源文件删除后，硬链接文件可以正常访问
  [root@centos7 ~]# echo &quot;xxxx&quot; &gt;&gt; aa.link
  [root@centos7 ~]# cat aa.link
  xxxx</code></pre>
</li>
<li><p>软链接示例：</p>
<pre><code>  [root@centos7 ~]# touch bb
  [root@centos7 ~]# echo &quot;xxxxxxxxxxxxx&quot; &gt;&gt; bb
  [root@centos7 ~]# ln -s bb bb.link
  [root@centos7 ~]# ll -i bb bb.link
  50339518 -rw-r--r--. 1 root root 14 Mar  1 08:23 bb
  50808392 lrwxrwxrwx. 1 root root  2 Mar  1 08:22 bb.link -&gt; bb

  [root@centos7 ~]# ll
  total 4
  -rw-r--r--. 1 root root 14 Mar  1 08:23 bb
  lrwxrwxrwx. 1 root root  2 Mar  1 08:22 bb.link -&gt; bb
  [root@centos7 ~]# cat bb.link
  xxxxxxxxxxxxx
  [root@centos7 ~]# rm -rf bb  //删除源文件之后，软连接不可以正常访问
  [root@centos7 ~]# cat bb.link
  cat: bb.link: No such file or directory
  //可以看到inode号不相同，大小不一致，软连接的文件权限为777，但实际是由源文件决定
  //文件类型变成符号链接，也就是(l)</code></pre>
</li>
<li><p>总结软链接和硬链接的区别</p>
<ol>
<li>本质：硬链接：同一个inode号多个文件名字，软连接不同文件</li>
<li>跨分区：硬链接不支持跨分区，软链接支持跨分区</li>
<li>硬链接不支持目录创建，软连接支持目录创建</li>
<li>硬链接没有依赖关系，软连接和源文件有依赖关系</li>
<li>硬链接不会增长连接数，软链接会增长连接数</li>
<li>路径：软连接的原始路径要相对软连接的相对路径</li>
<li>文件类型：硬链接根据文件创建的类型指定，软连接会变成l</li>
</ol>
</li>
</ul>
<h2 id="4、Linux上的文件管理类命令都有哪些，其常用的使用方法及相关示例演示。"><a href="#4、Linux上的文件管理类命令都有哪些，其常用的使用方法及相关示例演示。" class="headerlink" title="4、Linux上的文件管理类命令都有哪些，其常用的使用方法及相关示例演示。"></a>4、Linux上的文件管理类命令都有哪些，其常用的使用方法及相关示例演示。</h2><ul>
<li><p>cp命令</p>
<pre><code>  cp命令：copy
  常用选项：
  -i：交互式复制，即覆盖之前提醒用户确认；
  -f：强制覆盖目标文件；
  -r，-R：递归复制目录；
  -d：复制符号链接文件本身，而非其指向的源文件；
  -a：用于实现归档；

  单源复制：cp [OPTION]… [-T] SOURCE DEST
  多源复制：cp [OPTION]… SOURCE… DIRECTORY
  cp [OPTION]… -t DIRECTORY SOURCE…

  单源复制：cp [OPTION]… [-T] SOURCE DEST
  如果DEST不存在：则事先创建此文件，并复制源文件的数据流至DEST中；
  如果DEST存在：
  如果DEST是非目录文件：则覆盖目标文件；
  如果DEST是目录文件：则先在DEST目录下创建一个与源文件同名的文件，并复制其数据流；

  多源复制：cp [OPTION]… SOURCE… DIRECTORY
  cp [OPTION]… -t DIRECTORY SOURCE…
  如果DEST不存在：错误；
  如果DEST存在：
  如果DEST是非目录文件：错误；
  如果DEST是目录文件：分别复制每个文件至目标目录中，并保持原名；</code></pre>
</li>
<li><p>mv命令</p>
<pre><code>  mv命令：move
  mv [OPTION]… [-T] SOURCE DEST
  mv [OPTION]… SOURCE… DIRECTORY
  cp [OPTION]… -t DIRECTORY SOURCE…

  常用选项：
      -i：交互式
      -f：force</code></pre>
</li>
<li><p>rm命令</p>
<pre><code>  rm命令：remove
  rm [OPTION]… FILE…

  常用选项：
      -i：interactive
      -f：force
      -r：recursive

          删除目录：rm -rf /PATH/TO/DIR
              危险操作：rm -rf /*

  注意：所有不用的文件建议不要直接删除，而是移动至某个专用目录；（模拟回收站）</code></pre>
</li>
</ul>
<h2 id="5、复制-etc-profile至-tmp-目录，用查找替换命令删除-tmp-profile文件中的-行首的红白字符"><a href="#5、复制-etc-profile至-tmp-目录，用查找替换命令删除-tmp-profile文件中的-行首的红白字符" class="headerlink" title="5、复制/etc/profile至/tmp/目录，用查找替换命令删除/tmp/profile文件中的 行首的红白字符"></a>5、复制/etc/profile至/tmp/目录，用查找替换命令删除/tmp/profile文件中的 行首的红白字符</h2><pre><code>    [root@CentOS7 data]#cp /etc/profile /tmp/
    [root@CentOS7 data]#vim /tmp/profile :%s/^[[:space:]]\+//</code></pre>
<h2 id="6、在vim中设置tab缩进为4个字符"><a href="#6、在vim中设置tab缩进为4个字符" class="headerlink" title="6、在vim中设置tab缩进为4个字符"></a>6、在vim中设置tab缩进为4个字符</h2><pre><code>    [root@CentOS7 data]#vim vim ~/.vimrc

    在文件中添加：
        set ts=4
        set noexpandtab</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
  <entry>
    <title>第五周</title>
    <url>/2020/05/11/%E7%AC%AC%E4%BA%94%E5%91%A8/</url>
    <content><![CDATA[<h2 id="1、查找-etc目录下大于1M且类型为普通文件的所有文件"><a href="#1、查找-etc目录下大于1M且类型为普通文件的所有文件" class="headerlink" title="1、查找/etc目录下大于1M且类型为普通文件的所有文件"></a>1、查找/etc目录下大于1M且类型为普通文件的所有文件</h2><pre><code>~]# find /etc -size +1M -type f</code></pre>
<h2 id="2、打包-etc-目录下面所有conf结尾的文件，压缩包名称为当天的时间，并拷贝到-usr-local-src目录备份。"><a href="#2、打包-etc-目录下面所有conf结尾的文件，压缩包名称为当天的时间，并拷贝到-usr-local-src目录备份。" class="headerlink" title="2、打包/etc/目录下面所有conf结尾的文件，压缩包名称为当天的时间，并拷贝到/usr/local/src目录备份。"></a>2、打包/etc/目录下面所有conf结尾的文件，压缩包名称为当天的时间，并拷贝到/usr/local/src目录备份。</h2><pre><code>~]# find /etc/ -name &quot;*.conf&quot; | xargs tar -zcf `date +%F`.tgz &amp;&amp; cp -a `date +%F`.tgz /usr/local/src/</code></pre>
<h2 id="3、利用sed-取出ifconfig命令中本机的IPv4地址"><a href="#3、利用sed-取出ifconfig命令中本机的IPv4地址" class="headerlink" title="3、利用sed 取出ifconfig命令中本机的IPv4地址"></a>3、利用sed 取出ifconfig命令中本机的IPv4地址</h2><pre><code>~]# ifconfig ens33 | sed -n &#39;/inet /s#\(.*inet \)\(.*\)\( n.*\)#\2#gp&#39;</code></pre>
<h2 id="4、删除-etc-fstab文件中所有以-开头，后面至少跟一个空白字符的行的行首的-和空白字符"><a href="#4、删除-etc-fstab文件中所有以-开头，后面至少跟一个空白字符的行的行首的-和空白字符" class="headerlink" title="4、删除/etc/fstab文件中所有以#开头，后面至少跟一个空白字符的行的行首的#和空白字符"></a>4、删除/etc/fstab文件中所有以#开头，后面至少跟一个空白字符的行的行首的#和空白字符</h2><pre><code>~]# sed -ri &#39;s@^#[ ]+(.*)$@\1@g&#39; /etc/fstab</code></pre>
<h2 id="5、处理-etc-fstab路径-使用sed命令取出其目录名和基名"><a href="#5、处理-etc-fstab路径-使用sed命令取出其目录名和基名" class="headerlink" title="5、处理/etc/fstab路径,使用sed命令取出其目录名和基名"></a>5、处理/etc/fstab路径,使用sed命令取出其目录名和基名</h2><pre><code>取文件名：
    ~]# echo &quot;/etc/fstab&quot;| sed &#39;s@[^/]\+$@@&#39; 
取基名：
    ~]# echo &quot;/etc/fstab&quot;| sed &#39;s@.*/\([^/]\+\)$@\1@&#39;</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
  <entry>
    <title>第八周</title>
    <url>/2020/06/01/%E7%AC%AC%E5%85%AB%E5%91%A8/</url>
    <content><![CDATA[<h2 id="1、简述OSIosi七层模型和TCP-IP五层模型"><a href="#1、简述OSIosi七层模型和TCP-IP五层模型" class="headerlink" title="1、简述OSIosi七层模型和TCP/IP五层模型"></a>1、简述OSIosi七层模型和TCP/IP五层模型</h2><h3 id="1-OSI七层模型"><a href="#1-OSI七层模型" class="headerlink" title="(1) OSI七层模型"></a>(1) OSI七层模型</h3><h4 id="第七层-应用层"><a href="#第七层-应用层" class="headerlink" title="第七层 应用层"></a>第七层 应用层</h4><p><strong>应用层（Application Layer）</strong> 提供为应用软件而设的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。</p>
<h4 id="第六层-表达层"><a href="#第六层-表达层" class="headerlink" title="第六层 表达层"></a>第六层 表达层</h4><p><strong>表达层（Presentation Layer）</strong> 把数据转换为能与接收者的系统格式兼容并适合传输的格式。</p>
<h4 id="第五层-会话层"><a href="#第五层-会话层" class="headerlink" title="第五层 会话层"></a>第五层 会话层</h4><p><strong>会话层（Session Layer）</strong> 负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</p>
<h4 id="第四层-传输层"><a href="#第四层-传输层" class="headerlink" title="第四层 传输层"></a>第四层 传输层</h4><p><strong>传输层（Transport Layer）</strong> 把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。</p>
<h4 id="第三层-网络层"><a href="#第三层-网络层" class="headerlink" title="第三层 网络层"></a>第三层 网络层</h4><p><strong>网络层（Network Layer）</strong> 决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络资料。例如:互联网协议（IP）等。</p>
<h4 id="第二层-数据链路层"><a href="#第二层-数据链路层" class="headerlink" title="第二层 数据链路层"></a>第二层 数据链路层</h4><p><strong>数据链路层（Data Link Layer）</strong> 负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成信息框（Data Frame）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。</p>
<p>分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。</p>
<h4 id="第一层-物理层"><a href="#第一层-物理层" class="headerlink" title="第一层 物理层"></a>第一层 物理层</h4><p><strong>物理层（Physical Layer）</strong> 在局部局域网上传送数据帧（Data Frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。</p>
<h3 id="2-TCP-IP五层（四层）模型"><a href="#2-TCP-IP五层（四层）模型" class="headerlink" title="(2) TCP/IP五层（四层）模型"></a>(2) TCP/IP五层（四层）模型</h3><h4 id="第五层：应用层"><a href="#第五层：应用层" class="headerlink" title="第五层：应用层"></a>第五层：应用层</h4><p><strong>功能：</strong> 负责应用程序间沟通，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等。<br><strong>代表协议：</strong> HTTP、DNS、NAT、NATP。</p>
<h4 id="第四层：传输层"><a href="#第四层：传输层" class="headerlink" title="第四层：传输层"></a>第四层：传输层</h4><p><strong>功能：</strong> 负责两台主机之间的数据传输。 如传输控制协议 (TCP)， 能够确保数据可靠的从源主机发送到目标主机。<br><strong>代表协议：</strong> TCP、UDP。</p>
<h4 id="第三层：网络层"><a href="#第三层：网络层" class="headerlink" title="第三层：网络层"></a>第三层：网络层</h4><p><strong>功能：</strong> 负责地址管理和路由选择。 例如在IP协议中，通过IP地址来标识一台主机， 并通过路由表的方式规划出两台主机之间的数据传输的线路(路由)。路由器(Router)工作在网路层。<br>代表硬件：路由器。<br><strong>代表协议：</strong> IP。</p>
<h4 id="第二层：数据链路层"><a href="#第二层：数据链路层" class="headerlink" title="第二层：数据链路层"></a>第二层：数据链路层</h4><p><strong>功能：</strong> 负责设备之间的数据帧的传送和识别。 例如网卡设备的驱动、帧同步(就是说从网线上检测到什么信号算作新帧的开始)、冲突检测(如果检测到冲突就自动重发)、数据差错校验等工作. 有以太网、令牌环网, 无线LAN等标准。交换机(Switch)工作在数据链路层。<br><strong>代表硬件：</strong> 交换机等。<br><strong>代表协议：</strong> 以太网、令牌环网、无线LAN、ARP、MTU。  </p>
<h4 id="第一层：物理层"><a href="#第一层：物理层" class="headerlink" title="第一层：物理层"></a>第一层：物理层</h4><p><strong>功能：</strong> 负责光/电信号的传递方式。比如现在以太网通用的网线(双绞线)、早期以太网采用的的同轴电缆(现在主要用于有线电视)、光纤，现在的wifi无线网使用电磁波等都属于物理层的概念。物理层的能力决定了最大传输速率、传输距离、抗干扰性等。 集线器(Hub)工作在物理层。<br><strong>代表硬件：</strong> 双绞线（网线）、WiFi电磁波、集线器等。  </p>
<h2 id="2、总结描述TCP三次握手四次挥手"><a href="#2、总结描述TCP三次握手四次挥手" class="headerlink" title="2、总结描述TCP三次握手四次挥手"></a>2、总结描述TCP三次握手四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>客户端：CLOSE -&gt; SYN-SEND -&gt; ESTAB-LISHED<br>服务器端：LISTEN -&gt; SYN-RCVD -&gt; ESTAB-LISHED<br>1.客户端应用打开端口向服务器端发送请求后自动进入SYN-SEND状态<br>2.服务器端立即响应客户端请求后进入后自动SYN-RCVD状态并向客户发送响应<br>3.客户端收到响应后立即响应服务器端同时自动进入ESTAB-LISHED，服务器端收到客户端响应后自动进入ESTAB-LISHED，至此已建立连接</p>
<h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>客户端：ESTAB-LISHED -&gt; FIN-WAIT1 -&gt; FIN-WAIT2 -&gt; TIME-WAIT -&gt;CLOSE<br>服务器端：ESTAB-LISHED -&gt; CLOSE-WAIT -&gt; LAST-ACK -&gt; CLOSE<br>1.客户端向服务器发送分手请求自动进入FIN-WAIT1状态<br>2.服务器收到请求立即响应自动进入CLOSE-WAIT状态并向客户端发送响应<br>3.客户端收到响应后进入FIN-WAIT2状态服务器端可以继续向客户端发送剩余数据发送完毕后向客户端发送分手请求并进入LAST-ACK状态<br>4.客户端收到服务器分手请求立即响应后进入TIME-WAIT状态(防止丢包)然后进入CLOSE状态服务器端收到客户端响应后进入CLOSE状态，至此已断开链接</p>
<h2 id="3、描述TCP和UDP区别"><a href="#3、描述TCP和UDP区别" class="headerlink" title="3、描述TCP和UDP区别"></a>3、描述TCP和UDP区别</h2><p>1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保 证可靠交付<br>3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的<br>UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>5、TCP首部开销20字节;UDP的首部开销小，只有8个字节<br>6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p>
<h2 id="4、总结IP分类以及每个分类可以分配的IP数量"><a href="#4、总结IP分类以及每个分类可以分配的IP数量" class="headerlink" title="4、总结IP分类以及每个分类可以分配的IP数量"></a>4、总结IP分类以及每个分类可以分配的IP数量</h2><h3 id="A类："><a href="#A类：" class="headerlink" title="A类："></a>A类：</h3><p>前8位是网络ID，后24位是主机ID且最高位为0<br>0xxxxxxx.a.b.c<br>0-127.<br>网络数：2^7 = 128 去掉0和127 即1-126<br>每个网络中的主机数：2^24-2=16,777,214<br>默认子网掩码：255.0.0.0<br>私网地址：10.0.0.0</p>
<h3 id="B类："><a href="#B类：" class="headerlink" title="B类："></a>B类：</h3><p>10 00 0000 - 10 11 1111：128-191<br>网络数：2^14 = 16384<br>每个网络中的主机数：2^16-2 = 65534<br>默认子网掩码：255.255.0.0<br>私网地址：172.16.0.0-172.31.0.0</p>
<h3 id="C类："><a href="#C类：" class="headerlink" title="C类："></a>C类：</h3><p>110 0 0000 - 110 1 1111: 192-223<br>网络数：2^21 = 2097152<br>每个网络中的主机数：2^8-2 = 254<br>默认子网掩码：255.255.255.0<br>私网地址：192.168.0.0-192.168.255.0</p>
<h3 id="D类："><a href="#D类：" class="headerlink" title="D类："></a>D类：</h3><p>组播<br>1110 0000 - 1110 1111: 224-239<br>E类：保留未使用<br>240-255</p>
<h2 id="5、总结IP配置方法"><a href="#5、总结IP配置方法" class="headerlink" title="5、总结IP配置方法"></a>5、总结IP配置方法</h2><h3 id="1-ifconfig命令："><a href="#1-ifconfig命令：" class="headerlink" title="(1) ifconfig命令："></a>(1) ifconfig命令：</h3><pre><code>ifconfig [INTERFACE]
    ~]# ifconfig -a：显示所有接口，包括inactive状态的接口；

ifconfig interface [aftype] options | address …
    ~]# ifconfig IFACE IP/MASK [up]
    ~]# ifconfig IFACE IP netmask NETMASK

options：
    [-]promisc：开启/关闭  混杂模式；

注意：立即送往内核中的TCP/IP协议栈，并生效； </code></pre>
<h3 id="2-ip-address命令"><a href="#2-ip-address命令" class="headerlink" title="(2) ip address命令"></a>(2) ip address命令</h3><pre><code>ip address - protocol address management

    ip address add - add new protocol address
        ip addr add IFADDR dev IFACE
            [lable NAME]：为额外添加的地址指明接口别名；
            [broadcast ADDRESS]：广播地址；会根据IP和NETMASK自动计算得到；
            [scope SCOPE_VALUE]：
                global：全局可用；
                link：接口可用；
                host：仅本机可用；

    ip address delete - delete protocol address
        ip addr delete IFADDR dev IFACE

    ip address show - look at protocol addresses
        ip addr list [IFACE]：显示接口的地址；

    ip address flush - flush protocol addresses
        ip addr flush dev IFACE</code></pre>
<h3 id="3-nmcli命令"><a href="#3-nmcli命令" class="headerlink" title="(3) nmcli命令"></a>(3) nmcli命令</h3><pre><code>~]# nmcli conn modify IFACE [+|-]setting.property value
        ipv4.address
        ipv4.gateway
        ipv4.dns1
        ipv4.method
             manual</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
  <entry>
    <title>第四周</title>
    <url>/2020/05/04/%E7%AC%AC%E5%9B%9B%E5%91%A8/</url>
    <content><![CDATA[<h2 id="1、统计出-etc-passwd文件中其默认shell为非-sbin-nologin的用户个数，并将用户都显示出来"><a href="#1、统计出-etc-passwd文件中其默认shell为非-sbin-nologin的用户个数，并将用户都显示出来" class="headerlink" title="1、统计出/etc/passwd文件中其默认shell为非/sbin/nologin的用户个数，并将用户都显示出来"></a>1、统计出/etc/passwd文件中其默认shell为非/sbin/nologin的用户个数，并将用户都显示出来</h2><ul>
<li><p>统计shell为非/sbin/nologin用户的个数：</p>
<p>  <code>~]# cat /etc/passwd | grep -v &#39;/sbin/nologin&#39;|wc -l</code></p>
</li>
<li><p>显示用户：</p>
<p>  <code>~]# cat /etc/passwd | grep -v &#39;/sbin/nologin&#39;|cut -d: -f1</code></p>
</li>
</ul>
<h2 id="2、查出用户UID最大值的用户名、UID及shell类型"><a href="#2、查出用户UID最大值的用户名、UID及shell类型" class="headerlink" title="2、查出用户UID最大值的用户名、UID及shell类型"></a>2、查出用户UID最大值的用户名、UID及shell类型</h2><pre><code>&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~]#  sort -n -k3 -t&amp;#39;:&amp;#39; &amp;#x2F;etc&amp;#x2F;passwd |tail -1|cut -d: -f1,3,7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<h2 id="3、统计当前连接本机的每个远程主机IP的连接数，并按从大到小排序"><a href="#3、统计当前连接本机的每个远程主机IP的连接数，并按从大到小排序" class="headerlink" title="3、统计当前连接本机的每个远程主机IP的连接数，并按从大到小排序"></a>3、统计当前连接本机的每个远程主机IP的连接数，并按从大到小排序</h2><pre><code>&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~]# netstat -t|grep [0-9]|tr -s &amp;quot; &amp;quot; :|cut -d: -f4|uniq -c|sort -nr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<h2 id="4、编写脚本-createuser-sh，实现如下功能-使用一个用户名做为参数，如果-指定参数的用户存在，就显示其存在，否则添加之-显示添加的用户的id号等-信息"><a href="#4、编写脚本-createuser-sh，实现如下功能-使用一个用户名做为参数，如果-指定参数的用户存在，就显示其存在，否则添加之-显示添加的用户的id号等-信息" class="headerlink" title="4、编写脚本 createuser.sh，实现如下功能:使用一个用户名做为参数，如果 指定参数的用户存在，就显示其存在，否则添加之;显示添加的用户的id号等 信息"></a>4、编写脚本 createuser.sh，实现如下功能:使用一个用户名做为参数，如果 指定参数的用户存在，就显示其存在，否则添加之;显示添加的用户的id号等 信息</h2><pre><code>&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;useradd $1 &amp;amp;&amp;amp; id $1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
<h2 id="5、编写生成脚本基本格式的脚本，包括作者，联系方式，版本，时间，描述等"><a href="#5、编写生成脚本基本格式的脚本，包括作者，联系方式，版本，时间，描述等" class="headerlink" title="5、编写生成脚本基本格式的脚本，包括作者，联系方式，版本，时间，描述等"></a>5、编写生成脚本基本格式的脚本，包括作者，联系方式，版本，时间，描述等</h2><pre><code>&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;autocmd BufNewFile *.sh exec &amp;quot;:call SetTitle()&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; func SetTitle()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; if expand(&amp;quot;%:e&amp;quot;) &amp;#x3D;&amp;#x3D;&amp;#39;sh&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(1,&amp;quot;#!&amp;#x2F;bin&amp;#x2F;bash&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(2,&amp;quot;#&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(3,&amp;quot;#********************************************************&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(4,&amp;quot;#Author: zkliang&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(5,&amp;quot;#QQ: 88888&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(6,&amp;quot;#Date: &amp;quot;.strftime(&amp;quot;%Y-%m-%d&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(7,&amp;quot;#FileName: &amp;quot;.expand(&amp;quot;%&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(8,&amp;quot;#URL: https:&amp;#x2F;&amp;#x2F;zkliang.com&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(9,&amp;quot;#Description: The test script&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(10,&amp;quot;#Copyright (C): &amp;quot;.strftime(&amp;quot;%Y&amp;quot;).&amp;quot; All rights reserved&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(11,&amp;quot;#********************************************************&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; call setline(12,&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; endfunc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; autocmd BufNewFile * normal G&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre>
]]></content>
      <categories>
        <category>马哥Linux</category>
      </categories>
  </entry>
</search>
